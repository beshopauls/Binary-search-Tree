#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/stat.h>
#include <fcntl.h>

#define SIZE 32
#define NAME "./memory.txt"

int main()
{
    mkfifo(NAME,0777);

    int socket1, socket2;
    int sum=0;
    struct sockaddr_in addr;
    char buf[SIZE];
    char buf_exit[SIZE]="exit";

    socket1 = socket(AF_INET, SOCK_STREAM, 0);
    
    addr.sin_family = AF_INET;
    addr.sin_port = htons(3425);
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
    bind(socket1, (struct sockaddr *)&addr, sizeof(addr));

    listen(socket1, 1);
    
    socket2 = accept(socket1, NULL, NULL);

    while(1)
    {
        read(socket2,&buf,SIZE);
        if (!strcmp(buf,buf_exit)) 
	{
		close(socket2);
		return 0;
	}
	if (!fork())
	{
		int x;
		sscanf(buf,"%d",&x);
		sum+=x;
		sprintf(buf,"%d",sum);
        		write(socket2, buf, SIZE);

		int f=open(NAME,O_WRONLY);
		write(f,buf,SIZE);
		close(f);

		return 0;
	}
	int f=open(NAME,O_RDONLY);
	read(f,&buf,SIZE);
	sscanf(buf,"%d",&sum);
    }
    return 0;
}








#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#define SIZE 32

char buf[SIZE];
char buf_exit[SIZE]="exit";

int main()
{
    int socket1;
    struct sockaddr_in addr;

    socket1 = socket(AF_INET, SOCK_STREAM, 0);

    addr.sin_family = AF_INET;
    addr.sin_port = htons(3425);
    addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
    connect(socket1, (struct sockaddr *)&addr, sizeof(addr));
    while(1)                                                                                                                
    {
	printf("enter: ");
	gets(buf);                                                                                         
	if (!strcmp(buf,buf_exit))                                                                                              
	{   
	    write(socket1,buf,SIZE);                                                                                                                            
	    close(socket1);                                                                                                         
	    return 0;                                                                                                       
	}
	else
	{
	    write(socket1,buf,SIZE);
	    read(socket1,&buf,SIZE);
	    printf("answer: %s\n",buf);
	}                                                                                                       
    }
}
